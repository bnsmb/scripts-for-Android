#!/bin/bash
#
# Note: lines starting with "#h#" are printed by the script if called with the parameter "-h" or "--help"
#
#h# 
#h# print_security_patch - print either the security patch of a repository tree for AOSP or an Android ROM zip file
#
# History
#  29.03.2024 v1.0.0.0 /bs
#    initial release
#  08.04.2024 v1.1.0.0 /bs
#    added code to print the security patch level used to create ROM image zipfiles
#    the script now supports multiple parameter
#  14.11.2024 v1.2.0.0 /bs
#    the script now runs with "set -x" if the envionment variable DEBUG is not empty
#    added support for Android 15:
#     The config file used to define the patchlevel and the release changed again in Android 15:
#     The script now reads the config from the file ./build/core/build_id.mk if it exists
#

#h# 
#h# This script works for repositories that were last updated before and after the release of Android 14 QPR2 (in Q1 2024)
#h# If the script is called without parameters, it must be executed at the top level in a repository tree for AOSP
#h# 
#h# Set the environment variable VERBOSE to a non-empty value before executing the script to print verbose messages
#h# Set the environment variable DEBUG to a non-empty value before executing the script to execute the script with "set -x"
#h# 
#
#h# Usage: 
#h# 
#h#    print_security_patch [rom_zip_file|repository_tree] [...]
#h# 
# Without the parameter the script prints the security patch level of the repository tree starting at the current working directory
#
# If used like this
#
# . print_security_patch
#
# the script defines these environment variables for the repository tree starting in the current working directory:
#
#    RELEASE_PLATFORM_SECURITY_PATCH
#    BUILD_ID
#    REPO_FORMAT
#
# Returncodes:
# 
#    0 - this is a repository for ASOP in new format
#    1 - this is a repository for ASOP in old format
#   98 - script executed by an invalid user
#   99 - show usage helpo
#  100 - the current directory is not the top level of a repository tree for AOSP
#  201 - The file META-INF/com/android/metadata is missing in the ZIP file
#  202 - The file META-INF/com/android/metadata in the ZIP file is empty
#  203 - The statement post-security-patch-level= is missing in the file META-INF/com/android/metadata
#  240 - Can not change the working directory to the directory found in the parameter
#  250 - Invalid parameter
#

# ---------------------------------------------------------------------
# enable "set -x" if requested
#
[ "${DEBUG}"x != ""x ] && set -x

# ---------------------------------------------------------------------
# get the script name and version
#
SCRIPT_VERSION="$( grep "#.*/bs" $0 | grep -v grep | tail -1 | awk '{ print $3}' )"
SCRIPT_NAME="${0##*/}"

# ---------------------------------------------------------------------
# check for the parameter -h or --help
#
if [[ $0 = *print_security_patch ]] ; then
  if [ "$1"x = "-h"x -o  "$1"x = "--help"x ] ; then
    echo "${SCRIPT_NAME} ${SCRIPT_VERSION}"
    grep -E "^#h#" $0 | cut -f2- -d " "
    exit 99
  fi
fi


# ---------------------------------------------------------------------
# old build config file
#
VERSIONS_DEFAULTS_MK="./build/make/core/version_defaults.mk"

# ---------------------------------------------------------------------
# new build config files 
#
BUILD_ID_FILE="./build/core/build_id.mk"


BUILD_RELEASE_DIR="build/release"

RELEASE_CONFIG_MAP_FILE="${BUILD_RELEASE_DIR}/release_config_map.mk"

# ---------------------------------------------------------------------

RELEASE_PLATFORM_SECURITY_PATCH=""
BUILD_ID=""
REPO_FORMAT=""

# ---------------------------------------------------------------------

THISRC=0

OUTPUT_ON_ONE_LINE=1

# ---------------------------------------------------------------------

function LogInfo {
  if [ "${VERBOSE}"x != ""x ] ; then
    echo "$*"
  fi
}

function LogError {
  echo "ERROR: $*" >&2
}

# ---------------------------------------------------------------------

# print the security patch level used in repository tree for the Android OS
#
function print_security_patchlevel_of_a_repository {

  [ "${DEBUG}"x != ""x ] && set -x

  typeset THISRC=0
#
# check if the current directory is the top level of a repository for Android
#
  grep  "https://android.googlesource.com" .repo/manifests/default.xml 2>/dev/null >/dev/null
  if [ $? -ne 0 ] ; then
    LogError "The directory \"${PWD}\" is not the top level of a repository for ASOP"
    THISRC=100
  else
  
    if [ -r "${VERSIONS_DEFAULTS_MK}" ]  ;then
      REPO_FORMAT="old"

      LogInfo "Raeding the values from the source file \"${VERSIONS_DEFAULTS_MK}\" ..."

      RELEASE_PLATFORM_SECURITY_PATCH="$( grep "^[[:space:]]*PLATFORM_SECURITY_PATCH[[:space:]]*:=" "${VERSIONS_DEFAULTS_MK}" 2>/dev/null | awk '{ print $NF }'  )"
      BUILD_ID="$( grep "^[[:space:]]*DEFAULT_PLATFORM_VERSION[[:space:]]*:="  "${VERSIONS_DEFAULTS_MK}" | awk '{ print $NF }' )"
      THISRC=1

    elif [ -r  "${BUILD_ID_FILE}" ] ; then
      REPO_FORMAT="new"

      LogInfo "Raeding the values from the source file \"${BUILD_ID_FILE}\" ..."

      FULL_BUILD_ID="$( grep "^BUILD_ID=" "${BUILD_ID_FILE}" | cut -f2 -d "=" )"
      BUILD_ID="$( echo "${FULL_BUILD_ID%%.*}"  | tr "[A-Z]" "[a-z]" )"
      PATCH_DATE="$( echo "${FULL_BUILD_ID}"  | cut -f2 -d"." )"

      RELEASE_PLATFORM_SECURITY_PATCH="20$( echo "${PATCH_DATE}" | cut -c1,2 )-$( echo "${PATCH_DATE}" | cut -c3,4 )-$( echo "${PATCH_DATE}" | cut -c5,6 )"
      
    elif [ -r "${RELEASE_CONFIG_MAP_FILE}" ] ; then
      REPO_FORMAT="new"


      SCL_FILE="$( grep declare-release-config "${RELEASE_CONFIG_MAP_FILE}" | tr "()" "  " | awk '{ print $NF }' )"

      LogInfo "Raeding the build id from the source file \"${RELEASE_CONFIG_MAP_FILE}\" ..."

      BUILD_ID="$( grep declare-release-config "${RELEASE_CONFIG_MAP_FILE}"  | tr "," " " | awk '{ print $3}' )"
      THISRC=0
    
      if [ "${SCL_FILE}"x != ""x ] ; then

        SCL_FILE="${BUILD_RELEASE_DIR}/${SCL_FILE}"
        if [ -r "${SCL_FILE}" ] ; then
          LogInfo "Raeding the security patchlevel from the source file \"${SCL_FILE}\" ..."
          RELEASE_PLATFORM_SECURITY_PATCH="$( grep RELEASE_PLATFORM_SECURITY_PATCH  "${SCL_FILE}" | cut -f4 -d '"' )"
        fi
      fi
    fi
    
    if [ ${OUTPUT_ON_ONE_LINE} != 0 ] ; then
      if [ "${REPO_FORMAT}"x != ""x ] ; then
        echo "The repository uses the ${REPO_FORMAT} definitions"
      fi
      
      if [ "${RELEASE_PLATFORM_SECURITY_PATCH}"x != ""x ] ; then
        echo "The current security patch is \"${RELEASE_PLATFORM_SECURITY_PATCH}\" "
      else
        echo "Can not detect the current security patch"
      fi
      
      
      if [ "${BUILD_ID}"x != ""x ] ; then
        echo "The current build_id is \"${BUILD_ID}\" "
      else
        echo "Can not detect the current build id"
      fi
    else
      echo "Repository: ${PWD}, Patch Level: ${RELEASE_PLATFORM_SECURITY_PATCH}, Build ID: ${BUILD_ID}, Repository format: ${REPO_FORMAT} "
    fi
  fi

  return ${THISRC}
}


# ---------------------------------------------------------------------
# print the security patch level used to build an Android ROM zip file
#
function print_security_patchlevel_in_an_image_zip_file {

  [ "${DEBUG}"x != ""x ] && set -x

  typeset THISRC=0

  typeset CUR_ZIP_FILE="$1"
   
  typeset METADATA_FILE="META-INF/com/android/metadata"
  typeset METADATA=""
  typeset POST_SECURITY_PATCH_LEVEL=""
  
  METADATA="$( unzip -p "${CUR_ZIP_FILE}" "${METADATA_FILE}" 2>&1 )"
  if [ $? -ne 0 ] ; then
    LogError "${METADATA}"
    LogError "The file \"${METADATA_FILE}\" is missing in the ZIP file \"${CUR_ZIP_FILE}\" "
    THISRC=201
  elif [ "${METADATA}"x = ""x ] ; then
    LogError "The file \"${METADATA_FILE}\" in the ZIP file \"${CUR_ZIP_FILE}\" is empty"
    THISRC=202
  else
    POST_SECURITY_PATCH_LEVEL="$( echo "${METADATA}" | grep -E "^post-security-patch-level=" | cut -f2- -d "=" )"
    if [ "${POST_SECURITY_PATCH_LEVEL}"x = ""x ] ; then
      LogError "The statement \"post-security-patch-level=<date>\" is missing in the file \"${METADATA_FILE}\" from the ZIP file \"${CUR_ZIP_FILE}\" "
      THISRC=203
    else
      echo "ZIP File: ${CUR_ZIP_FILE}, Patch Level: ${POST_SECURITY_PATCH_LEVEL}"
      THISRC=0
    fi
  fi
  
  return ${THISRC}
}

# ---------------------------------------------------------------------
# main function
#

LogInfo "${SCRIPT_NAME} ${SCRIPT_VERSION}"

if [ $# -eq 0 ] ; then
  echo "Retrieving the security patch level for the repository at \"${PWD}\" ..."
  print_security_patchlevel_of_a_repository
else
  OUTPUT_ON_ONE_LINE=0
  
  for CUR_PARAMETER in $* ; do
  
    if [ -d "${CUR_PARAMETER}" ] ; then
      LogInfo "Retrieving the security patch level for the repository at \"${CUR_PARAMETER}\" ..."
      
      cd "${CUR_PARAMETER}"
      if [ $? -ne 0 ] ; then
        LogError "Can not change the working directory to \"${CUR_PARAMETER}\" "
        THISRC=240
      else
        print_security_patchlevel_of_a_repository
        TEMPRC=$?
        [ ${TEMPRC} -gt ${THISRC} ] && THISRC=${TEMPRC}
      fi
    elif [ -f ${CUR_PARAMETER} ] ; then
      LogInfo "Retrieving the security patch level used in the zip fole \"${CUR_PARAMETER}\" ..."
      print_security_patchlevel_in_an_image_zip_file "${CUR_PARAMETER}"
      TEMPRC=$?
      [ ${TEMPRC} -gt ${THISRC} ] && THISRC=${TEMPRC}
    else
      LogError "The parameter \"${CUR_PARAMETER}\" is neither a repository directory nor an image file"
      THISRC=250
    fi
  done
fi

# ---------------------------------------------------------------------

if [[ $0 = *print_security_patch ]] ; then
  exit ${THISRC}
fi

# ---------------------------------------------------------------------
