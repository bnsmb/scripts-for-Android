#!/bin/bash
#
# Note: lines starting with "#h#" are printed by the script if called with the parameter "-h" or "--help"
#
#h# 
#h# print_security_patch - print either the security patch of a repository tree for AOSP or an Android ROM zip file
#
# History
#  29.03.2024 v1.0.0.0 /bs
#    initial release
#  08.04.2024 v1.1.0.0 /bs
#    added code to print the security patch level used to create ROM image zipfiles
#    the script now supports multiple parameter
#  14.11.2024 v1.2.0.0 /bs
#    the script now runs with "set -x" if the envionment variable DEBUG is not empty
#    added support for Android 15:
#     The config file used to define the patchlevel and the release changed again in Android 15:
#     The script now reads the config from the file ./build/core/build_id.mk if it exists
#
#  16.01.2025 v1.3.0.0 /bs
#     the script now supports parameter to set variables; the format for the parameter is: "var=value"
#     added code to print the build command for creating the ROM image file (use the parameter PRINT=0 to print the command)
#     added code to print the global variables found in the repository tree (use the parameter PRINTVARS=0 to print the variables and values)
#     added support for the environment variables ROM_TYPE and TARGET_PHONE
#

#h# 
#h# This script works for repositories that were last updated before and after the release of Android 14 QPR2 (in Q1 2024)
#h# If the script is called without parameters, it must be executed at the top level in a repository tree for AOSP
#h# 
#h# Set the environment variable VERBOSE to a non-empty value before executing the script to print verbose messages
#h# Set the environment variable DEBUG to a non-empty value before executing the script to execute the script with "set -x"
#h# 
#
#h# Usage: 
#h# 
#h#    print_security_patch [rom_zip_file|repository_tree] [var=value] [...]
#h# 
#h# Known values for the parameter "var=value":
#h# 
#h# Parameter                  Description
#h# ---------------------------------------------------------------------------------------
#h# PRINT=0                    Print the command to build the image for repositories
#h# PRINTVARS=0                Print the value for the global variables set by this script
#h# 
#h# VERBOSE=0                  Turn on verbose messages
#h# ROM_TYPE=<romtype>         Change the type of the ROM used in the build command (user, eng, or debug)
#h# TARGET_PHONE=<phone_name>  Change the type of the phone used in the build command
#h# 

# Without the parameter the script prints the security patch level of the repository tree starting at the current working directory
#
# If used like this
#
# . print_security_patch
#
# the script defines these environment variables for the repository tree starting in the current working directory:
#
#    RELEASE_PLATFORM_SECURITY_PATCH
#    BUILD_ID
#    REPO_FORMAT
#
# and  if the parameter PRINT=0 is used
#
#    BUILD_COMMAND
#
#
# Returncodes:
# 
#    0 - this is a repository for ASOP in new format
#    1 - this is a repository for ASOP in old format
#   98 - script executed by an invalid user
#   99 - show usage helpo
#  100 - the current directory is not the top level of a repository tree for AOSP
#  201 - The file META-INF/com/android/metadata is missing in the ZIP file
#  202 - The file META-INF/com/android/metadata in the ZIP file is empty
#  203 - The statement post-security-patch-level= is missing in the file META-INF/com/android/metadata
#  240 - Can not change the working directory to the directory found in the parameter
#  250 - Invalid parameter
#  251 - Invalid parameter to set a variable
#

# ---------------------------------------------------------------------
# enable "set -x" if requested
#
[ "${DEBUG}"x != ""x ] && set -x

# ---------------------------------------------------------------------
# define constants

typeset -r __TRUE=0
typeset -r __FALSE=1

# ---------------------------------------------------------------------
# get the script name and version
#
SCRIPT_VERSION="$( grep "#.*/bs" $0 | grep -v grep | tail -1 | awk '{ print $3}' )"
SCRIPT_NAME="${0##*/}"

# ---------------------------------------------------------------------
# variables for the build command printed by this script

TARGET_PHONE="${TARGET_PHONE:=zenfone8}"

ROM_TYPE="${ROM_TYPE:=user}"

# ---------------------------------------------------------------------
# check for the parameter -h or --help
#
if [[ $0 = *print_security_patch ]] ; then
  if [ "$1"x = "-h"x -o  "$1"x = "--help"x ] ; then
    echo "${SCRIPT_NAME} ${SCRIPT_VERSION}"
    grep -E "^#h#" $0 | cut -f2- -d " "
    echo "Environment variables supported by this script:"
    echo
    for CUR_VAR in $( grep -E "^[A-Z].*:=" $0 | cut -f1 -d "=" ); do
      echo "${CUR_VAR} - current value is $( eval echo \\\"\$$CUR_VAR\\\" )"
    done
    echo
    exit 99
  fi
fi


# ---------------------------------------------------------------------
# old build config file 
#
VERSIONS_DEFAULTS_MK="./build/make/core/version_defaults.mk"

# ---------------------------------------------------------------------
# new build config files 
#
BUILD_ID_FILE="./build/core/build_id.mk"

BUILD_RELEASE_DIR="build/release"

RELEASE_CONFIG_MAP_FILE="${BUILD_RELEASE_DIR}/release_config_map.mk"

# ---------------------------------------------------------------------
# variables for the values found in the repository
#
RELEASE_PLATFORM_SECURITY_PATCH=""
BUILD_ID=""

# variables using the values found in the repository
#
REPO_FORMAT=""
BUILD_COMMAND=""

# ---------------------------------------------------------------------
# variables for the build command printed by this script

PRINT_BUILD_COMMAND=${__FALSE}
PRINT=""

PRINT_GLOBAL_VARIABLES=${__FALSE}
PRINTVARS=""

GLOBAL_VARIABLES="TARGET_PHONE  ROM_TYPE BUILD_COMMAND "
GLOBAL_VARIABLES_IN_THE_REPO="RELEASE_PLATFORM_SECURITY_PATCH BUILD_ID REPO_FORMAT "

# undocumented environment variable 
#
  SEPARATOR_LINE="${SEPARATOR_LINE:=# -------------------------------------------------------------------------------------------------------------------------------- }"

# ---------------------------------------------------------------------

THISRC=0

# ---------------------------------------------------------------------
# functions
#

function LogMsg {
   echo "$*"
}

function LogInfo {
  if [ "${VERBOSE}"x != ""x ] ; then
    LogMsg "INFO: $*"
  fi
}

function LogWarning {
  LogMsg "WARNING: $*" 
}

function LogError {
  LogMsg "ERROR: $*" >&2
}

# ---------------------------------------------------------------------
# print the security patch level used in repository tree for the Android OS
#
function print_security_patchlevel_of_a_repository {

  [ "${DEBUG}"x != ""x ] && set -x

  typeset THISRC=0
#
# check if the current directory is the top level of a repository for Android
#
  grep  "https://android.googlesource.com" .repo/manifests/default.xml 2>/dev/null >/dev/null
  if [ $? -ne 0 ] ; then
    LogError "The directory \"${PWD}\" is not the top level of a repository for ASOP"
    THISRC=100
  else
  
    if [ -r "${VERSIONS_DEFAULTS_MK}" ]  ;then
      REPO_FORMAT="old"

      LogInfo "Reading the values from the source file \"${VERSIONS_DEFAULTS_MK}\" ..."

      RELEASE_PLATFORM_SECURITY_PATCH="$( grep "^[[:space:]]*PLATFORM_SECURITY_PATCH[[:space:]]*:=" "${VERSIONS_DEFAULTS_MK}" 2>/dev/null | awk '{ print $NF }'  )"
      BUILD_ID="$( grep "^[[:space:]]*DEFAULT_PLATFORM_VERSION[[:space:]]*:="  "${VERSIONS_DEFAULTS_MK}" | awk '{ print $NF }' )"
      THISRC=1

    elif [ -r  "${BUILD_ID_FILE}" ] ; then
      REPO_FORMAT="new"

      LogInfo "Raeding the values from the source file \"${BUILD_ID_FILE}\" ..."

      FULL_BUILD_ID="$( grep "^BUILD_ID=" "${BUILD_ID_FILE}" | cut -f2 -d "=" )"
      BUILD_ID="$( echo "${FULL_BUILD_ID%%.*}"  | tr "[A-Z]" "[a-z]" )"
      PATCH_DATE="$( echo "${FULL_BUILD_ID}"  | cut -f2 -d"." )"

      RELEASE_PLATFORM_SECURITY_PATCH="20$( echo "${PATCH_DATE}" | cut -c1,2 )-$( echo "${PATCH_DATE}" | cut -c3,4 )-$( echo "${PATCH_DATE}" | cut -c5,6 )"
      
    elif [ -r "${RELEASE_CONFIG_MAP_FILE}" ] ; then
      REPO_FORMAT="new"


      SCL_FILE="$( grep declare-release-config "${RELEASE_CONFIG_MAP_FILE}" | tr "()" "  " | awk '{ print $NF }' )"

      LogInfo "Raeding the build id from the source file \"${RELEASE_CONFIG_MAP_FILE}\" ..."

      BUILD_ID="$( grep declare-release-config "${RELEASE_CONFIG_MAP_FILE}"  | tr "," " " | awk '{ print $3}' )"
      THISRC=0
    
      if [ "${SCL_FILE}"x != ""x ] ; then

        SCL_FILE="${BUILD_RELEASE_DIR}/${SCL_FILE}"
        if [ -r "${SCL_FILE}" ] ; then
          LogInfo "Raeding the security patchlevel from the source file \"${SCL_FILE}\" ..."
          RELEASE_PLATFORM_SECURITY_PATCH="$( grep RELEASE_PLATFORM_SECURITY_PATCH  "${SCL_FILE}" | cut -f4 -d '"' )"
        fi
      fi
    fi
    
    if [ ${OUTPUT_ON_ONE_LINE} != ${__TRUE} ] ; then
      if [ "${REPO_FORMAT}"x != ""x ] ; then
        LogMsg "The repository uses the ${REPO_FORMAT} definitions"
      fi
      
      if [ "${RELEASE_PLATFORM_SECURITY_PATCH}"x != ""x ] ; then
        LogMsg "The current security patch is \"${RELEASE_PLATFORM_SECURITY_PATCH}\" "
      else
        LogMsg "Can not detect the current security patch"
      fi
      
      
      if [ "${BUILD_ID}"x != ""x ] ; then
        LogMsg "The current build_id is \"${BUILD_ID}\" "
      else
        LogMsg "Can not detect the current build id"
      fi
    else
      LogMsg "Repository: ${PWD}, Patch Level: ${RELEASE_PLATFORM_SECURITY_PATCH}, Build ID: ${BUILD_ID}, Repository format: ${REPO_FORMAT} "
    fi
  fi

  return ${THISRC}
}


# ---------------------------------------------------------------------
# print the security patch level used to build an Android ROM zip file
#
function print_security_patchlevel_in_an_image_zip_file {

  [ "${DEBUG}"x != ""x ] && set -x

  typeset THISRC=0

  typeset CUR_ZIP_FILE="$1"
   
  typeset METADATA_FILE="META-INF/com/android/metadata"
  typeset METADATA=""
  typeset POST_SECURITY_PATCH_LEVEL=""
  
  METADATA="$( unzip -p "${CUR_ZIP_FILE}" "${METADATA_FILE}" 2>&1 )"
  if [ $? -ne 0 ] ; then
    LogError "${METADATA}"
    LogError "The file \"${METADATA_FILE}\" is missing in the ZIP file \"${CUR_ZIP_FILE}\" "
    THISRC=201
  elif [ "${METADATA}"x = ""x ] ; then
    LogError "The file \"${METADATA_FILE}\" in the ZIP file \"${CUR_ZIP_FILE}\" is empty"
    THISRC=202
  else
    POST_SECURITY_PATCH_LEVEL="$( echo "${METADATA}" | grep -E "^post-security-patch-level=" | cut -f2- -d "=" )"
    if [ "${POST_SECURITY_PATCH_LEVEL}"x = ""x ] ; then
      LogError "The statement \"post-security-patch-level=<date>\" is missing in the file \"${METADATA_FILE}\" from the ZIP file \"${CUR_ZIP_FILE}\" "
      THISRC=203
    else
      LogMsg "ZIP File: ${CUR_ZIP_FILE}, Patch Level: ${POST_SECURITY_PATCH_LEVEL}"
      THISRC=0
    fi
  fi
  
  return ${THISRC}
}

# ---------------------------------------------------------------------
# main function
#

LogInfo "${SCRIPT_NAME} ${SCRIPT_VERSION}"

[ ${PRINT_BUILD_COMMAND} != ${__FALSE} ] && PRINT="0"

[ ${PRINT_GLOBAL_VARIABLES} != ${__FALSE} ] && PRINTVARS="0"

NO_OF_REPOS=0


PARAMETER_FOUND=${__FALSE}
for CUR_PARAMETER in $* ; do
  [[ ${CUR_PARAMETER} != *=* ]] && PARAMETER_FOUND=${__TRUE} || (( NO_OF_REPOS =  NO_OF_REPOS + 1 ))
done


LIST_OF_PARAMETERS="$*"

if [ ${PARAMETER_FOUND} = ${__FALSE} ] ; then
  LogMsg "Retrieving the security patch level for the repository at \"${PWD}\" ..."
  LIST_OF_PARAMETERS="${LIST_OF_PARAMETERS} ${PWD}"
  OUTPUT_ON_ONE_LINE=${OUTPUT_ON_ONE_LINE:=${__FALSE}}
else
  OUTPUT_ON_ONE_LINE=${OUTPUT_ON_ONE_LINE:=${__TRUE}}
fi


if [ 0 = 0 ] ; then
  
  for CUR_PARAMETER in ${LIST_OF_PARAMETERS} ; do

    RELEASE_PLATFORM_SECURITY_PATCH=""
    BUILD_ID=""
    REPO_FORMAT=""
    BUILD_COMMAND=""  

    if [[ ${CUR_PARAMETER} = *=* ]] ; then
      LogInfo "Executing now \"${CUR_PARAMETER}\" ..."
      eval "${CUR_PARAMETER}" 
      if [ $? -ne 0 ] ; then
        LogError "Error executing \"${CUR_PARAMETER}\" "
        exit 251
      else
        continue
      fi
    fi
  
    if [ -d "${CUR_PARAMETER}" ] ; then
      
      if [ "${PRINT}"x != ""x -o "${PRINTVARS}"x != ""x ] ; then
        [ ${NO_OF_REPOS} != 0 ] && LogMsg "${SEPARATOR_LINE}"
        LogMsg "Retrieving the security patch level for the repository at \"${CUR_PARAMETER}\" ..."
      fi
      
      cd "${CUR_PARAMETER}"
      if [ $? -ne 0 ] ; then
        LogError "Can not change the working directory to \"${CUR_PARAMETER}\" "
        THISRC=240
      else
   
        print_security_patchlevel_of_a_repository
        TEMPRC=$?
        [ ${TEMPRC} -gt ${THISRC} ] && THISRC=${TEMPRC}
        if [ ${TEMPRC} -le 1 ] ; then
          if [ "${PRINT}"x != ""x  ] ; then

            if [ ! -d vendor/omni/ ] ; then
              LogWarning "This is not a repository for the OmniROM - the build command for this repo is not known by this script"
            else
              if [ "${REPO_FORMAT}"x = "new"x ] ; then
                export BUILD_COMMAND="brunch ${TARGET_PHONE} ${BUILD_ID} ${ROM_TYPE}"
              else
                export BUILD_COMMAND="brunch omni_${TARGET_PHONE}_${ROM_TYPE}"
              fi
   
              LogMsg "
# The command to build the image in the directory \"${CUR_PARAMETER}\" is:

${BUILD_COMMAND}
"
            fi        
          fi
          
          if [ "${PRINTVARS}"x != ""x  ] ; then
            LogMsg ""
            LogMsg "The values for the global variables defined in this script or in the script parameter are:"
            LogMsg ""
  
            for CUR_VAR in ${GLOBAL_VARIABLES} ; do
              eval "CUR_VALUE=\"\$${CUR_VAR}\""
              LogMsg "${CUR_VAR}=\"${CUR_VALUE}\""
            done

            LogMsg ""
            LogMsg "The values for the global variables found in the repos in the directory \"${CUR_PARAMETER}\" are:"
            LogMsg ""

            for CUR_VAR in ${GLOBAL_VARIABLES_IN_THE_REPO} ; do
              eval "CUR_VALUE=\"\$${CUR_VAR}\""
              LogMsg "${CUR_VAR}=\"${CUR_VALUE}\""
            done

            LogMsg ""
          fi
        fi
      fi
    elif [ -f ${CUR_PARAMETER} ] ; then
      LogInfo "Retrieving the security patch level used in the zip fole \"${CUR_PARAMETER}\" ..."
      print_security_patchlevel_in_an_image_zip_file "${CUR_PARAMETER}"
      TEMPRC=$?
      [ ${TEMPRC} -gt ${THISRC} ] && THISRC=${TEMPRC}
    else
      LogError "The parameter \"${CUR_PARAMETER}\" is neither a repository directory nor an image file"
      THISRC=250
    fi
  done
fi

# ---------------------------------------------------------------------



# ---------------------------------------------------------------------


# ---------------------------------------------------------------------


if [[ $0 = *print_security_patch ]] ; then
  exit ${THISRC}
fi

# ---------------------------------------------------------------------
